{"ast":null,"code":"import _slicedToArray from \"/Users/danfengyang/go/src/INFO441/collaborative-photo-management/clients/final-clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/danfengyang/go/src/INFO441/collaborative-photo-management/clients/final-clients/src/MainPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport './Styles/MainPage.css';\nimport ReactDOM from 'react-dom';\nimport { checkPropTypes } from 'prop-types';\n\nvar MainPage = function MainPage(props) {\n  //data structure for getting images\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      imgDataList = _useState2[0],\n      setImgDataList = _useState2[1]; //data structure for getting tags\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tagDataList = _useState4[0],\n      setTagDataList = _useState4[1]; //variable to store user imput tag name\n\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tagText = _useState6[0],\n      setTagText = _useState6[1]; //map to store binding between tag id and object\n\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tagIDTable = _useState8[0],\n      setTagIDTable = _useState8[1]; //variable to store selected tag\n\n\n  var _useState9 = useState(-1),\n      _useState10 = _slicedToArray(_useState9, 2),\n      tag = _useState10[0],\n      setTag = _useState10[1]; // let tagIDTable = {};\n  // Fetch all img data\n\n\n  console.log(localStorage.getItem(\"Authorization\"));\n  useEffect(function () {\n    fetch(\"https://api.xutiancheng.me/v1/photos\", {\n      method: 'get',\n      headers: new Headers({\n        'Authorization': localStorage.getItem(\"Authorization\")\n      })\n    }).then(function (resp) {\n      return resp.json();\n    }); // .then(data => {setImgDataList(data)})\n  }); // Fetch all tag data\n\n  useEffect(function () {\n    fetch(\"https://api.xutiancheng.me/v1/tags\", {\n      method: 'get',\n      headers: new Headers({\n        'Authorization': localStorage.getItem(\"Authorization\")\n      })\n    }).then(function (resp) {\n      return resp.json();\n    }); // .then(data => \n    // {   \n    //     for (let index = 0; index < data.length; index++) {\n    //         const element = data[index];\n    //         let obj={};\n    //         obj[element.id] = element.name;\n    //         Object.assign(tagIDTable, obj);\n    //     }\n    //     setTagDataList(data);\n    // })\n  }); // //TODO:\n  // //assign tag id and name to the tag id table\n  // let setTagIDTable = (data) => {\n  //     Object.assign(tagIDTable, {data.id : data});\n  // }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(TagButtonList, {\n    tags: tagDataList,\n    onClick: setTag,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(ImgCardList, {\n    tag: tag,\n    imgDataList: imgDataList,\n    tagIDTable: tagIDTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(TagTextField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }));\n}; //populates the tag buttons into a list\n\n\nvar TagButtonList = function TagButtonList(props) {\n  var TagLists = props.tags.map(function (data) {\n    return React.createElement(TagButton, {\n      key: data.id,\n      tag: data,\n      onClick: props.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    });\n  });\n  return React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      \"flexDirection\": \"row\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, TagLists);\n}; //TODO:\n//gets the new tag name typed by user, after user press 'Enter', pass it to /v1/tags\n//with payload: {\"name\": \"tagname\"}\n\n\nvar TagTextField = function TagTextField() {\n  return React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"type tag to upload...\",\n    onKeyPress: function onKeyPress(event) {\n      if (event.key === 'Enter') {\n        useEffect(function () {\n          // POST request using fetch inside useEffect React hook\n          var requestOptions = {\n            method: 'POST',\n            headers: new Headers({\n              'Authorization': localStorage.getItem(\"Authorization\")\n            }),\n            body: JSON.stringify({\n              name: \"tagText\"\n            })\n          };\n          fetch(\"https://api.xutiancheng.me/v1/tags\", requestOptions).then(function (resp) {\n            return resp.json();\n          }).then(console.log(resp)); // empty dependency array means this effect will only run once (like componentDidMount in classes)\n        }, []);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  });\n}; //individual button showing each tag\n\n\nvar TagButton = function TagButton(props) {\n  return React.createElement(\"button\", {\n    onClick: props.tag.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, props.tag.name); // return <button onClick={props.onClick(props.tag.id)}>props.tag.name</button>;\n}; //populates the image cards into a list\n\n\nvar ImgCardList = function ImgCardList(props) {\n  var photoListItems;\n\n  if (props.tag === -1) {\n    photoListItems = props.imgDataList.map(function (data) {\n      // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n      return React.createElement(ImgCard, {\n        key: data.id,\n        img: data,\n        style: {\n          display: \"flex\",\n          \"flex-wrap\": \"wrap\",\n          \"flexDirection\": \"row\"\n        },\n        tagIDTable: props.tagIDTable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      });\n    });\n  } else {\n    photoListItems = props.imgDataList.map(function (data) {\n      if (data.tags.includes(props.tag)) {\n        // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n        return React.createElement(ImgCard, {\n          key: data.id,\n          img: data,\n          style: {\n            display: \"flex\",\n            \"flex-wrap\": \"wrap\",\n            \"flexDirection\": \"row\"\n          },\n          tagIDTable: props.tagIDTable,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        });\n      }\n    });\n  }\n\n  return photoListItems;\n}; //individual image card, still missing function that when clicked,\n//lets user add a tag for this photo\n\n\nvar ImgCard = function ImgCard(props) {\n  //TODO:\n  // let displayTags = props.img.tags.map((item, i) => (\n  //     <p>{tagIDTable[item.id].name}</p>\n  // ));\n  var tagNameList = [];\n\n  for (var index = 0; index < props.img.tags.length; index++) {\n    var tagIDFromImage = props.img.tags[index].id;\n    var tagID = props.tagIDTable[tagIDFromImage];\n    tagNameList.push(tagID);\n  } // console.log(cardComponentList);\n\n\n  var displayResult = tagNameList.map(function (item, i) {\n    return React.createElement(\"p\", {\n      className: \"font-size-0-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, item);\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: props.img.url,\n    style: {\n      width: \"100px\",\n      height: \"100px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), displayResult, React.createElement(\"button\", {\n    onClick: BindTagImg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"Add Tag\"));\n}; //TODO: bind image to a new tag name input by user and post \n//it to /v1/photos/:photoID/tag/:tagID \n\n\nvar BindTagImg = function BindTagImg() {\n  console.log(\"bindimage!!\");\n};\n\nexport default MainPage;","map":{"version":3,"sources":["/Users/danfengyang/go/src/INFO441/collaborative-photo-management/clients/final-clients/src/MainPage.js"],"names":["React","useEffect","useState","ReactDOM","checkPropTypes","MainPage","props","imgDataList","setImgDataList","tagDataList","setTagDataList","tagText","setTagText","tagIDTable","setTagIDTable","tag","setTag","console","log","localStorage","getItem","fetch","method","headers","Headers","then","resp","json","TagButtonList","TagLists","tags","map","data","id","onClick","display","TagTextField","event","key","requestOptions","body","JSON","stringify","name","TagButton","ImgCardList","photoListItems","includes","ImgCard","tagNameList","index","img","length","tagIDFromImage","tagID","push","displayResult","item","i","url","width","height","BindTagImg"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Styles/MainPage.css';\n\nimport ReactDOM from 'react-dom';\nimport { checkPropTypes } from 'prop-types';\n\nconst MainPage = (props) => {\n    //data structure for getting images\n    const [imgDataList,setImgDataList] = useState([]);\n    //data structure for getting tags\n    const [tagDataList,setTagDataList] = useState([]);\n    //variable to store user imput tag name\n    const [tagText, setTagText] = useState(\"\");\n\n    //map to store binding between tag id and object\n    const [tagIDTable, setTagIDTable] = useState({});\n    //variable to store selected tag\n    const [tag,setTag] = useState(-1);\n\n    // let tagIDTable = {};\n\n    // Fetch all img data\n    console.log(localStorage.getItem(\"Authorization\"));\n    useEffect(() => {\n        fetch(\"https://api.xutiancheng.me/v1/photos\",  { \n            method: 'get', \n            headers: new Headers({\n                'Authorization': localStorage.getItem(\"Authorization\"), \n            })\n          })\n        .then(resp => resp.json())\n        // .then(data => {setImgDataList(data)})\n    });\n    // Fetch all tag data\n    useEffect(() => {\n        fetch(\"https://api.xutiancheng.me/v1/tags\",  { \n            method: 'get', \n            headers: new Headers({\n              'Authorization': localStorage.getItem(\"Authorization\"), \n            })\n          })\n        .then(resp => resp.json())\n        // .then(data => \n        // {   \n        //     for (let index = 0; index < data.length; index++) {\n        //         const element = data[index];\n        //         let obj={};\n        //         obj[element.id] = element.name;\n        //         Object.assign(tagIDTable, obj);\n    \n        //     }\n        //     setTagDataList(data);\n        // })\n\n\n    });\n    \n    // //TODO:\n    // //assign tag id and name to the tag id table\n    // let setTagIDTable = (data) => {\n    //     Object.assign(tagIDTable, {data.id : data});\n    // }\n    \n    return (\n    <div>\n        <TagButtonList tags={tagDataList} onClick={setTag}/>\n        <ImgCardList tag={tag} imgDataList={imgDataList} tagIDTable={tagIDTable}/>\n        {/* <ImgCardList tags={tagDataList} tag={tag} imgDataList={imgDataList}/> */}\n        <TagTextField></TagTextField>\n    </div>\n    );\n    \n}\n\n//populates the tag buttons into a list\nconst TagButtonList = (props)=>{\n    const TagLists = props.tags.map(data=><TagButton key={data.id} tag={data} onClick={props.onClick}/>);\n    return (<div style={{display:\"flex\",\"flexDirection\": \"row\"}}>{TagLists}</div>)\n}\n\n//TODO:\n//gets the new tag name typed by user, after user press 'Enter', pass it to /v1/tags\n//with payload: {\"name\": \"tagname\"}\nconst TagTextField = () => {\n    return <input\n    type=\"text\"\n    placeholder=\"type tag to upload...\"\n    onKeyPress={event => {\n                if (event.key === 'Enter') {\n                    useEffect(() => {\n                        // POST request using fetch inside useEffect React hook\n                        const requestOptions = {\n                            method: 'POST',\n                            headers: new Headers({\n                                'Authorization': localStorage.getItem(\"Authorization\"), \n                              }),\n                            body: JSON.stringify({ name: \"tagText\" })\n                        };\n                        fetch(\"https://api.xutiancheng.me/v1/tags\", requestOptions)\n                            .then(resp => resp.json())\n                            .then(console.log(resp));\n                    \n                    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n                    }, []);\n                }\n              }}\n    />;\n};\n\n//individual button showing each tag\nconst TagButton = (props)=>{\n        return <button onClick={props.tag.id}>{props.tag.name}</button>;\n\n    // return <button onClick={props.onClick(props.tag.id)}>props.tag.name</button>;\n}\n\n//populates the image cards into a list\nconst ImgCardList = (props) => {\n    var photoListItems;\n    if (props.tag === -1) {\n        photoListItems = props.imgDataList.map((data) => {\n            // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n\n            return <ImgCard key={data.id} img={data} style={{display:\"flex\",\"flex-wrap\":\"wrap\",\"flexDirection\": \"row\"}}  tagIDTable={props.tagIDTable}/>\n        });\n    } else {\n        photoListItems = props.imgDataList.map((data) => {\n            if (data.tags.includes(props.tag)){\n                // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n\n                return <ImgCard key={data.id} img={data} style={{display:\"flex\",\"flex-wrap\":\"wrap\",\"flexDirection\": \"row\"}} tagIDTable={props.tagIDTable}/>\n            }\n        });\n    }\n    \n    return (photoListItems)\n}\n\n//individual image card, still missing function that when clicked,\n//lets user add a tag for this photo\nconst ImgCard = (props) =>{\n    //TODO:\n    // let displayTags = props.img.tags.map((item, i) => (\n    //     <p>{tagIDTable[item.id].name}</p>\n    // ));\n    let tagNameList = [];\n    for (let index = 0; index < props.img.tags.length; index++) {\n        let tagIDFromImage = props.img.tags[index].id;\n        let tagID = props.tagIDTable[tagIDFromImage];\n        tagNameList.push(tagID);\n    }\n    \n        // console.log(cardComponentList);\n    let displayResult = tagNameList.map((item, i) => (\n          <p className=\"font-size-0-8\">\n            {item}\n          </p>)\n    );\n    \n    return(\n    <div>\n        <img src={props.img.url} style={{width:\"100px\",height:\"100px\"}}/>\n        {displayResult}\n         <button onClick={BindTagImg}>Add Tag</button>\n        {/* {displayTags} */}\n    </div>\n     );\n    \n}\n\n//TODO: bind image to a new tag name input by user and post \n//it to /v1/photos/:photoID/tag/:tagID \nconst BindTagImg = ()=>{\n    console.log(\"bindimage!!\");\n}\n\n\nexport default MainPage;"]},"metadata":{},"sourceType":"module"}