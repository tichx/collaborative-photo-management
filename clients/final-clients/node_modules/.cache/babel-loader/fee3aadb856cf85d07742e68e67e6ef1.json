{"ast":null,"code":"import _slicedToArray from \"/Users/danfengyang/go/src/INFO441/collaborative-photo-management/clients/final-clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/danfengyang/go/src/INFO441/collaborative-photo-management/clients/final-clients/src/MainPage.js\",\n    _this = this;\n\nimport React, { useEffect, useState } from 'react';\nimport './Styles/MainPage.css';\nimport ReactDOM from 'react-dom';\nimport { checkPropTypes } from 'prop-types';\n\nvar MainPage = function MainPage(props) {\n  //data structure for getting images\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      imgDataList = _useState2[0],\n      setImgDataList = _useState2[1]; //data structure for getting tags\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tagDataList = _useState4[0],\n      setTagDataList = _useState4[1]; //variable to store user imput tag name\n\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tagText = _useState6[0],\n      setTagText = _useState6[1]; //map to store binding between tag id and object\n  // const [tagIDTable, setTagIDTable] = useState({});\n  //variable to store selected tag\n\n\n  var _useState7 = useState(-1),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tag = _useState8[0],\n      setTag = _useState8[1];\n\n  var tagIDTable = {}; // Fetch all img data\n\n  useEffect(function () {\n    fetch(\"https://api.xutiancheng.me/v1/photos\", {\n      method: 'get',\n      headers: new Headers({\n        'Authorization': localStorage.getItem(\"Authorization\")\n      })\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (data) {\n      setImgDataList(data);\n    });\n  }); // Fetch all tag data\n\n  useEffect(function () {\n    fetch(\"https://api.xutiancheng.me/v1/tags\", {\n      method: 'get',\n      headers: new Headers({\n        'Authorization': localStorage.getItem(\"Authorization\")\n      })\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (data) {\n      // console.log(data.length);\n      // for (let index = 0; index < data.length; index++) {\n      //     const element = data[index];\n      //     let obj={};\n      //     obj[element.id] = element.name;\n      //     Object.assign(tagIDTable, obj);\n      // }\n      // console.log(tagIDTable);\n      setTagDataList(data); //setTagIDTable(data)\n    });\n  }); // //TODO:\n  // //assign tag id and name to the tag id table\n  // let setTagIDTable = (data) => {\n  //     Object.assign(tagIDTable, {data.id : data});\n  // }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(TagButtonList, {\n    tags: tagDataList,\n    onClick: setTag,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(ImgCardList, {\n    tag: tag,\n    imgDataList: imgDataList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(TagTextField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n}; //populates the tag buttons into a list\n\n\nvar TagButtonList = function TagButtonList(props) {\n  var TagLists = props.tags.map(function (data) {\n    return React.createElement(TagButton, {\n      key: data.id,\n      tag: data,\n      onClick: props.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    });\n  });\n  return React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      \"flex-direction\": \"row\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, TagLists);\n}; //TODO:\n//gets the new tag name typed by user, after user press 'Enter', pass it to /v1/tags\n//with payload: {\"name\": \"tagname\"}\n\n\nvar TagTextField = function TagTextField() {\n  return React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"type tag to upload...\",\n    onChange: function onChange(event) {\n      _this.setState({\n        tagText: event.target.value\n      });\n    },\n    onKeyPress: function onKeyPress(event) {\n      if (event.key === 'Enter') {\n        useEffect(function () {\n          // POST request using fetch inside useEffect React hook\n          var requestOptions = {\n            method: 'POST',\n            body: JSON.stringify({\n              name: \"tagText\"\n            })\n          }; // fetch(\"https://api.xutiancheng.me/v1/tags\", requestOptions)\n          //     .then(response => response.json())\n          //     .then(console.log(response));\n          // empty dependency array means this effect will only run once (like componentDidMount in classes)\n        }, []);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  });\n}; //individual button showing each tag\n\n\nvar TagButton = function TagButton(props) {\n  return React.createElement(\"button\", {\n    onClick: props.tag.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, props.tag.name); // return <button onClick={props.onClick(props.tag.id)}>props.tag.name</button>;\n}; //populates the image cards into a list\n\n\nvar ImgCardList = function ImgCardList(props) {\n  var photoListItems;\n\n  if (props.tag === -1) {\n    photoListItems = props.imgDataList.map(function (data) {\n      // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n      return React.createElement(ImgCard, {\n        key: data.id,\n        img: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      });\n    });\n  } else {\n    photoListItems = props.imgDataList.map(function (data) {\n      if (data.tags.includes(props.tag)) {\n        // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n        return React.createElement(ImgCard, {\n          key: data.id,\n          img: data,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        });\n      }\n    });\n  }\n\n  return photoListItems;\n}; //individual image card, still missing function that when clicked,\n//lets user add a tag for this photo\n\n\nvar ImgCard = function ImgCard(props) {\n  //TODO:\n  // let displayTags = props.img.tags.map((item, i) => (\n  //     <p>{tagIDTable[item.id].name}</p>\n  // ));\n  // let tagNameList = [];\n  for (var index = 0; index < props.img.tags.length; index++) {\n    console.log(\"yahaha\");\n    var tagID = props.img.tags[index];\n  }\n\n  return React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      \"flex-wrap\": \"wrap\",\n      \"flex-direction\": \"row\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: props.img.url,\n    style: {\n      width: \"50px\",\n      height: \"50px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }));\n}; //TODO: bind image to a new tag name input by user and post \n//it to /v1/photos/:photoID/tag/:tagID \n\n\nvar BindTagImg = function BindTagImg() {};\n\nexport default MainPage;","map":{"version":3,"sources":["/Users/danfengyang/go/src/INFO441/collaborative-photo-management/clients/final-clients/src/MainPage.js"],"names":["React","useEffect","useState","ReactDOM","checkPropTypes","MainPage","props","imgDataList","setImgDataList","tagDataList","setTagDataList","tagText","setTagText","tag","setTag","tagIDTable","fetch","method","headers","Headers","localStorage","getItem","then","resp","json","data","TagButtonList","TagLists","tags","map","id","onClick","display","TagTextField","event","setState","target","value","key","requestOptions","body","JSON","stringify","name","TagButton","ImgCardList","photoListItems","includes","ImgCard","index","img","length","console","log","tagID","url","width","height","BindTagImg"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,uBAAP;AAEA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,cAAT,QAA+B,YAA/B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AACxB;AADwB,kBAEaJ,QAAQ,CAAC,EAAD,CAFrB;AAAA;AAAA,MAEjBK,WAFiB;AAAA,MAELC,cAFK,kBAGxB;;;AAHwB,mBAIaN,QAAQ,CAAC,EAAD,CAJrB;AAAA;AAAA,MAIjBO,WAJiB;AAAA,MAILC,cAJK,kBAKxB;;;AALwB,mBAMMR,QAAQ,CAAC,EAAD,CANd;AAAA;AAAA,MAMjBS,OANiB;AAAA,MAMRC,UANQ,kBAQxB;AACA;AACA;;;AAVwB,mBAWHV,QAAQ,CAAC,CAAC,CAAF,CAXL;AAAA;AAAA,MAWjBW,GAXiB;AAAA,MAWbC,MAXa;;AAaxB,MAAIC,UAAU,GAAG,EAAjB,CAbwB,CAexB;;AACAd,EAAAA,SAAS,CAAC,YAAM;AACZe,IAAAA,KAAK,CAAC,sCAAD,EAA0C;AAC3CC,MAAAA,MAAM,EAAE,KADmC;AAE3CC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjB,yBAAiBC,YAAY,CAACC,OAAb,CAAqB,eAArB;AADA,OAAZ;AAFkC,KAA1C,CAAL,CAMCC,IAND,CAMM,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KANV,EAOCF,IAPD,CAOM,UAAAG,IAAI,EAAI;AAACjB,MAAAA,cAAc,CAACiB,IAAD,CAAd;AAAqB,KAPpC;AAQH,GATQ,CAAT,CAhBwB,CA0BxB;;AACAxB,EAAAA,SAAS,CAAC,YAAM;AACZe,IAAAA,KAAK,CAAC,oCAAD,EAAwC;AACzCC,MAAAA,MAAM,EAAE,KADiC;AAEzCC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,yBAAiBC,YAAY,CAACC,OAAb,CAAqB,eAArB;AADE,OAAZ;AAFgC,KAAxC,CAAL,CAMCC,IAND,CAMM,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KANV,EAOCF,IAPD,CAOM,UAAAG,IAAI,EACV;AACI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACAf,MAAAA,cAAc,CAACe,IAAD,CAAd,CAVJ,CAWI;AACH,KApBD;AAuBH,GAxBQ,CAAT,CA3BwB,CAqDxB;AACA;AACA;AACA;AACA;;AAEA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAEhB,WAArB;AAAkC,IAAA,OAAO,EAAEK,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAED,GAAlB;AAAuB,IAAA,WAAW,EAAEN,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAII,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADA;AASH,CApED,C,CAsEA;;;AACA,IAAMmB,aAAa,GAAG,SAAhBA,aAAgB,CAACpB,KAAD,EAAS;AAC3B,MAAMqB,QAAQ,GAAGrB,KAAK,CAACsB,IAAN,CAAWC,GAAX,CAAe,UAAAJ,IAAI;AAAA,WAAE,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAEA,IAAI,CAACK,EAArB;AAAyB,MAAA,GAAG,EAAEL,IAA9B;AAAoC,MAAA,OAAO,EAAEnB,KAAK,CAACyB,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAF;AAAA,GAAnB,CAAjB;AACA,SAAQ;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAC,MAAT;AAAgB,wBAAkB;AAAlC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuDL,QAAvD,CAAR;AACH,CAHD,C,CAKA;AACA;AACA;;;AACA,IAAMM,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,SAAO;AACP,IAAA,IAAI,EAAC,MADE;AAEP,IAAA,WAAW,EAAC,uBAFL;AAGP,IAAA,QAAQ,EAAE,kBAAAC,KAAK,EAAI;AAAC,MAAA,KAAI,CAACC,QAAL,CAAc;AAACxB,QAAAA,OAAO,EAAEuB,KAAK,CAACE,MAAN,CAAaC;AAAvB,OAAd;AAA6C,KAH1D;AAIP,IAAA,UAAU,EAAE,oBAAAH,KAAK,EAAI;AACT,UAAIA,KAAK,CAACI,GAAN,KAAc,OAAlB,EAA2B;AACvBrC,QAAAA,SAAS,CAAC,YAAM;AACZ;AACA,cAAMsC,cAAc,GAAG;AACnBtB,YAAAA,MAAM,EAAE,MADW;AAEnBuB,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAf;AAFa,WAAvB,CAFY,CAMZ;AACA;AACA;AAEJ;AACC,SAXQ,EAWN,EAXM,CAAT;AAYH;AACF,KAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAqBH,CAtBD,C,CAwBA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACtC,KAAD,EAAS;AACnB,SAAO;AAAQ,IAAA,OAAO,EAAEA,KAAK,CAACO,GAAN,CAAUiB,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCxB,KAAK,CAACO,GAAN,CAAU8B,IAA1C,CAAP,CADmB,CAGvB;AACH,CAJD,C,CAMA;;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACvC,KAAD,EAAW;AAC3B,MAAIwC,cAAJ;;AACA,MAAIxC,KAAK,CAACO,GAAN,KAAc,CAAC,CAAnB,EAAsB;AAClBiC,IAAAA,cAAc,GAAGxC,KAAK,CAACC,WAAN,CAAkBsB,GAAlB,CAAsB,UAACJ,IAAD,EAAU;AAC7C;AAEA,aAAO,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,IAAI,CAACK,EAAnB;AAAuB,QAAA,GAAG,EAAEL,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAJgB,CAAjB;AAKH,GAND,MAMO;AACHqB,IAAAA,cAAc,GAAGxC,KAAK,CAACC,WAAN,CAAkBsB,GAAlB,CAAsB,UAACJ,IAAD,EAAU;AAC7C,UAAIA,IAAI,CAACG,IAAL,CAAUmB,QAAV,CAAmBzC,KAAK,CAACO,GAAzB,CAAJ,EAAkC;AAC9B;AAEA,eAAO,oBAAC,OAAD;AAAS,UAAA,GAAG,EAAEY,IAAI,CAACK,EAAnB;AAAuB,UAAA,GAAG,EAAEL,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AACJ,KANgB,CAAjB;AAOH;;AAED,SAAQqB,cAAR;AACH,CAnBD,C,CAqBA;AACA;;;AACA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAAC1C,KAAD,EAAU;AACtB;AACA;AACA;AACA;AACA;AACA,OAAK,IAAI2C,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG3C,KAAK,CAAC4C,GAAN,CAAUtB,IAAV,CAAeuB,MAA3C,EAAmDF,KAAK,EAAxD,EAA4D;AACxDG,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAIC,KAAK,GAAGhD,KAAK,CAAC4C,GAAN,CAAUtB,IAAV,CAAeqB,KAAf,CAAZ;AACH;;AAED,SAAO;AAAK,IAAA,KAAK,EAAE;AAACjB,MAAAA,OAAO,EAAC,MAAT;AAAgB,mBAAY,MAA5B;AAAmC,wBAAkB;AAArD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH;AAAK,IAAA,GAAG,EAAE1B,KAAK,CAAC4C,GAAN,CAAUK,GAApB;AAAyB,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAC,MAAP;AAAcC,MAAAA,MAAM,EAAC;AAArB,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAQH,CAnBD,C,CAqBA;AACA;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAI,CAEtB,CAFD;;AAKA,eAAerD,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Styles/MainPage.css';\n\nimport ReactDOM from 'react-dom';\nimport { checkPropTypes } from 'prop-types';\n\nconst MainPage = (props) => {\n    //data structure for getting images\n    const [imgDataList,setImgDataList] = useState([]);\n    //data structure for getting tags\n    const [tagDataList,setTagDataList] = useState([]);\n    //variable to store user imput tag name\n    const [tagText, setTagText] = useState(\"\");\n\n    //map to store binding between tag id and object\n    // const [tagIDTable, setTagIDTable] = useState({});\n    //variable to store selected tag\n    const [tag,setTag] = useState(-1);\n\n    var tagIDTable = {};\n\n    // Fetch all img data\n    useEffect(() => {\n        fetch(\"https://api.xutiancheng.me/v1/photos\",  { \n            method: 'get', \n            headers: new Headers({\n                'Authorization': localStorage.getItem(\"Authorization\"), \n            })\n          })\n        .then(resp => resp.json())\n        .then(data => {setImgDataList(data)})\n    });\n    // Fetch all tag data\n    useEffect(() => {\n        fetch(\"https://api.xutiancheng.me/v1/tags\",  { \n            method: 'get', \n            headers: new Headers({\n              'Authorization': localStorage.getItem(\"Authorization\"), \n            })\n          })\n        .then(resp => resp.json())\n        .then(data => \n        {   \n            // console.log(data.length);\n            // for (let index = 0; index < data.length; index++) {\n            //     const element = data[index];\n            //     let obj={};\n            //     obj[element.id] = element.name;\n            //     Object.assign(tagIDTable, obj);\n\n            // }\n            // console.log(tagIDTable);\n            setTagDataList(data);\n            //setTagIDTable(data)\n        })\n\n\n    });\n    \n    // //TODO:\n    // //assign tag id and name to the tag id table\n    // let setTagIDTable = (data) => {\n    //     Object.assign(tagIDTable, {data.id : data});\n    // }\n    \n    return (\n    <div>\n        <TagButtonList tags={tagDataList} onClick={setTag}/>\n        <ImgCardList tag={tag} imgDataList={imgDataList}/>\n        {/* <ImgCardList tags={tagDataList} tag={tag} imgDataList={imgDataList}/> */}\n        <TagTextField></TagTextField>\n    </div>\n    );\n    \n}\n\n//populates the tag buttons into a list\nconst TagButtonList = (props)=>{\n    const TagLists = props.tags.map(data=><TagButton key={data.id} tag={data} onClick={props.onClick}/>);\n    return (<div style={{display:\"flex\",\"flex-direction\": \"row\"}}>{TagLists}</div>)\n}\n\n//TODO:\n//gets the new tag name typed by user, after user press 'Enter', pass it to /v1/tags\n//with payload: {\"name\": \"tagname\"}\nconst TagTextField = () => {\n    return <input\n    type=\"text\"\n    placeholder=\"type tag to upload...\"\n    onChange={event => {this.setState({tagText: event.target.value})}}\n    onKeyPress={event => {\n                if (event.key === 'Enter') {\n                    useEffect(() => {\n                        // POST request using fetch inside useEffect React hook\n                        const requestOptions = {\n                            method: 'POST',\n                            body: JSON.stringify({ name: \"tagText\" })\n                        };\n                        // fetch(\"https://api.xutiancheng.me/v1/tags\", requestOptions)\n                        //     .then(response => response.json())\n                        //     .then(console.log(response));\n                    \n                    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n                    }, []);\n                }\n              }}\n    />;\n};\n\n//individual button showing each tag\nconst TagButton = (props)=>{\n        return <button onClick={props.tag.id}>{props.tag.name}</button>;\n\n    // return <button onClick={props.onClick(props.tag.id)}>props.tag.name</button>;\n}\n\n//populates the image cards into a list\nconst ImgCardList = (props) => {\n    var photoListItems;\n    if (props.tag === -1) {\n        photoListItems = props.imgDataList.map((data) => {\n            // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n\n            return <ImgCard key={data.id} img={data}/>\n        });\n    } else {\n        photoListItems = props.imgDataList.map((data) => {\n            if (data.tags.includes(props.tag)){\n                // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n\n                return <ImgCard key={data.id} img={data}/>\n            }\n        });\n    }\n    \n    return (photoListItems)\n}\n\n//individual image card, still missing function that when clicked,\n//lets user add a tag for this photo\nconst ImgCard = (props) =>{\n    //TODO:\n    // let displayTags = props.img.tags.map((item, i) => (\n    //     <p>{tagIDTable[item.id].name}</p>\n    // ));\n    // let tagNameList = [];\n    for (let index = 0; index < props.img.tags.length; index++) {\n        console.log(\"yahaha\");\n        let tagID = props.img.tags[index];\n    }\n    \n    return(<div style={{display:\"flex\",\"flex-wrap\":\"wrap\",\"flex-direction\": \"row\"}}>\n        <img src={props.img.url} style={{width:\"50px\",height:\"50px\"}}/>\n\n        {/* <button onClick={}>Add Tag</button> */}\n        {/* {displayTags} */}\n     </div>);\n    \n    \n}\n\n//TODO: bind image to a new tag name input by user and post \n//it to /v1/photos/:photoID/tag/:tagID \nconst BindTagImg = ()=>{\n    \n}\n\n\nexport default MainPage;"]},"metadata":{},"sourceType":"module"}