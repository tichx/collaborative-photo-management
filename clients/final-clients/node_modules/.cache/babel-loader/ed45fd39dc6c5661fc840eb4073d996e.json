{"ast":null,"code":"import _slicedToArray from \"/Users/danfengyang/go/src/INFO441/collaborative-photo-management/clients/final-clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/danfengyang/go/src/INFO441/collaborative-photo-management/clients/final-clients/src/MainPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport './Styles/MainPage.css';\nimport Alert from 'react-bootstrap/Alert';\n\nvar MainPage = function MainPage(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      show = _useState2[0],\n      setShow = _useState2[1]; //data structure for getting images\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      imgDataList = _useState4[0],\n      setImgDataList = _useState4[1]; //data structure for getting tags\n\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tagDataList = _useState6[0],\n      setTagDataList = _useState6[1]; //variable to store user imput tag name\n\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tagText = _useState8[0],\n      setTagText = _useState8[1]; //map to store binding between tag id and object\n\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      tagIDTable = _useState10[0],\n      setTagIDTable = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      IDTagTable = _useState12[0],\n      setIDTagTable = _useState12[1]; //variable to store selected tag\n\n\n  var _useState13 = useState(-1),\n      _useState14 = _slicedToArray(_useState13, 2),\n      tag = _useState14[0],\n      setTag = _useState14[1];\n\n  var handleTagClick = function handleTagClick(newTagId) {\n    setTag(newTagId);\n  };\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      notifyTagChange = _useState16[0],\n      setNotifyTagChange = _useState16[1];\n\n  var NotifyTagUpdate = function NotifyTagUpdate() {\n    setNotifyTagChange(!notifyTagChange);\n  }; // TEST ONLY!!!backdoor code for getting authorization token.\n  // console.log(localStorage.getItem(\"Authorization\"));\n  // Fetch all img data\n\n\n  useEffect(function () {\n    fetch(\"https://api.xutiancheng.me/v1/photos\", {\n      method: 'get',\n      headers: new Headers({\n        'Authorization': localStorage.getItem(\"Authorization\")\n      })\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (data) {\n      setImgDataList(data);\n    });\n  }, []); // Fetch all tag data\n\n  useEffect(function () {\n    fetch(\"https://api.xutiancheng.me/v1/tags\", {\n      method: 'get',\n      headers: new Headers({\n        'Authorization': localStorage.getItem(\"Authorization\")\n      })\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (data) {\n      for (var index = 0; index < data.length; index++) {\n        var element = data[index];\n        var obj = {};\n        obj[element.id] = element.name;\n        Object.assign(tagIDTable, obj);\n        var obj2 = {};\n        obj2[element.name] = element.id;\n        Object.assign(IDTagTable, obj2);\n      }\n\n      setTagDataList(data);\n    });\n  }, [notifyTagChange]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(TagTextField, {\n    NotifyTagUpdate: NotifyTagUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(TagButtonList, {\n    tags: tagDataList,\n    setTag: handleTagClick,\n    NotifyTagUpdate: props.NotifyTagUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(ImgCardList, {\n    tag: tag,\n    imgDataList: imgDataList,\n    tagIDTable: tagIDTable,\n    IDTagTable: IDTagTable,\n    NotifyTagUpdate: NotifyTagUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n}; //populates the tag buttons into a list\n\n\nvar TagButtonList = function TagButtonList(props) {\n  var TagLists = props.tags.map(function (data) {\n    return React.createElement(TagButton, {\n      key: data.id,\n      tag: data,\n      setTag: props.setTag,\n      NotifyTagUpdate: props.NotifyTagUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    });\n  });\n  return React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      \"flexDirection\": \"row\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, TagLists);\n}; //gets the new tag name typed by user, after user press 'Enter', pass it to /v1/tags\n//with payload: {\"name\": \"tagname\"}\n\n\nvar TagTextField = function TagTextField(props) {\n  return React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"create new tag\",\n    onKeyPress: function onKeyPress(event) {\n      if (event.key === 'Enter') {\n        var newTag = event.target.value; // POST request using fetch inside useEffect React hook\n\n        var requestOptions = {\n          method: 'post',\n          headers: new Headers({\n            'Content-Type': 'application/json',\n            'Authorization': localStorage.getItem(\"Authorization\")\n          }),\n          body: JSON.stringify({\n            \"name\": newTag\n          })\n        };\n        fetch(\"https://api.xutiancheng.me/v1/tags\", requestOptions).then(function (resp) {\n          return resp.json();\n        }).then(function (resp) {\n          if (resp.status == 201) {\n            setTimeout(function () {\n              props.NotifyTagUpdate();\n            }, 1000);\n          } else {}\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  });\n}; //individual button showing each tag\n\n\nvar TagButton = function TagButton(props) {\n  var handleTagClick = function handleTagClick(e) {\n    props.setTag(props.tag.id);\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      flexDirection: \"row\",\n      margin: \"15px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: handleTagClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, props.tag.name), React.createElement(BindTagMember, {\n    tagID: props.tag.id,\n    NotifyTagUpdate: props.NotifyTagUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }));\n}; //populates the image cards into a list\n\n\nvar ImgCardList = function ImgCardList(props) {\n  var photoListItems;\n\n  if (props.tag === -1) {\n    photoListItems = props.imgDataList.map(function (data) {\n      return React.createElement(ImgCard, {\n        key: data.id,\n        img: data,\n        style: {\n          display: \"flex\",\n          \"flex-wrap\": \"wrap\",\n          \"flexDirection\": \"row\"\n        },\n        tagIDTable: props.tagIDTable,\n        IDTagTable: props.IDTagTable,\n        NotifyTagUpdate: props.NotifyTagUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      });\n    });\n  } else {\n    photoListItems = props.imgDataList.map(function (data) {\n      var tagIds = [];\n      data.tags.forEach(function (e) {\n        tagIds.push(e.id);\n      });\n\n      if (tagIds.includes(props.tag)) {\n        // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n        return React.createElement(ImgCard, {\n          key: data.id,\n          img: data,\n          style: {\n            display: \"flex\",\n            \"flex-wrap\": \"wrap\",\n            \"flexDirection\": \"row\"\n          },\n          tagIDTable: props.tagIDTable,\n          IDTagTable: props.IDTagTable,\n          NotifyTagUpdate: props.NotifyTagUpdate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        });\n      }\n    });\n  }\n\n  return photoListItems;\n}; //individual image card, still missing function that when clicked,\n//lets user add a tag for this photo\n\n\nvar ImgCard = function ImgCard(props) {\n  var tagNameList = [];\n\n  for (var index = 0; index < props.img.tags.length; index++) {\n    var tagIDFromImage = props.img.tags[index].id;\n    var tagID = props.tagIDTable[tagIDFromImage];\n    tagNameList.push(tagID);\n  }\n\n  var displayResult = tagNameList.map(function (item, i) {\n    return React.createElement(\"p\", {\n      key: i,\n      className: \"font-size-0-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, item);\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: props.img.url,\n    alt: \"wrong image url\",\n    style: {\n      width: \"150px\",\n      height: \"150px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), displayResult, React.createElement(BindTagImg, {\n    imgID: props.img.id,\n    IDTagTable: props.IDTagTable,\n    NotifyTagUpdate: props.NotifyTagUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }));\n}; //bind image to a new tag name input by user and post \n//it to /v1/photos/:photoID/tag/:tagID \n\n\nvar BindTagImg = function BindTagImg(props) {\n  var imageID = props.imgID;\n  return React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"bind photo with old tag\",\n    onKeyPress: function onKeyPress(event) {\n      if (event.key === 'Enter') {\n        var tagName = event.target.value;\n        var tagID = props.IDTagTable[tagName]; // POST request using fetch inside useEffect React hook\n\n        var requestOptions = {\n          method: 'post',\n          headers: new Headers({\n            'Authorization': localStorage.getItem(\"Authorization\")\n          })\n        };\n        fetch(\"https://api.xutiancheng.me/v1/photos/\" + imageID + \"/tag/\" + tagID, requestOptions).then(function (resp) {\n          return resp.json();\n        }).then(setTimeout(function () {\n          props.NotifyTagUpdate();\n        }, 1000));\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  });\n}; //bind tag to a user id input by user and post \n//it\n\n\nvar BindTagMember = function BindTagMember(props) {\n  var tagID = props.tagID;\n  return React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"userID\",\n    style: {\n      width: \"50px\"\n    },\n    onKeyPress: function onKeyPress(event) {\n      if (event.key === 'Enter') {\n        var userID = event.target.value; // POST request using fetch inside useEffect React hook\n\n        var requestOptions = {\n          method: 'post',\n          headers: new Headers({\n            'Content-Type': 'application/json',\n            'Authorization': localStorage.getItem(\"Authorization\")\n          }),\n          body: JSON.stringify({\n            \"id\": userID\n          })\n        };\n        fetch(\"https://api.xutiancheng.me/v1/tags/\" + tagID + \"/members\", requestOptions);\n        props.NotifyTagUpdate();\n        alert(\"member added\");\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  });\n};\n\nexport default MainPage;","map":{"version":3,"sources":["/Users/danfengyang/go/src/INFO441/collaborative-photo-management/clients/final-clients/src/MainPage.js"],"names":["React","useEffect","useState","Alert","MainPage","props","show","setShow","imgDataList","setImgDataList","tagDataList","setTagDataList","tagText","setTagText","tagIDTable","setTagIDTable","IDTagTable","setIDTagTable","tag","setTag","handleTagClick","newTagId","notifyTagChange","setNotifyTagChange","NotifyTagUpdate","fetch","method","headers","Headers","localStorage","getItem","then","resp","json","data","index","length","element","obj","id","name","Object","assign","obj2","TagButtonList","TagLists","tags","map","display","TagTextField","event","key","newTag","target","value","requestOptions","body","JSON","stringify","status","setTimeout","TagButton","e","flexWrap","flexDirection","margin","ImgCardList","photoListItems","tagIds","forEach","push","includes","ImgCard","tagNameList","img","tagIDFromImage","tagID","displayResult","item","i","url","width","height","BindTagImg","imageID","imgID","tagName","BindTagMember","userID","alert"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Styles/MainPage.css';\nimport Alert from 'react-bootstrap/Alert';\n\nconst MainPage = (props) => {\n    const [show, setShow] = useState(true);\n    //data structure for getting images\n    const [imgDataList,setImgDataList] = useState([]);\n    //data structure for getting tags\n    const [tagDataList,setTagDataList] = useState([]);\n    //variable to store user imput tag name\n    const [tagText, setTagText] = useState(\"\");\n\n    //map to store binding between tag id and object\n    const [tagIDTable, setTagIDTable] = useState({});\n    const [IDTagTable, setIDTagTable] = useState({});\n    //variable to store selected tag\n    const [tag,setTag] = useState(-1);\n    const handleTagClick = (newTagId)=>{\n        setTag(newTagId);\n    }\n\n    const [notifyTagChange, setNotifyTagChange] = useState(false);\n\n    const NotifyTagUpdate = () =>{\n        \n        setNotifyTagChange(!notifyTagChange);\n        \n    }\n\n    // TEST ONLY!!!backdoor code for getting authorization token.\n    // console.log(localStorage.getItem(\"Authorization\"));\n\n\n    // Fetch all img data\n    useEffect(() => {\n        fetch(\"https://api.xutiancheng.me/v1/photos\",  { \n            method: 'get', \n            headers: new Headers({\n                'Authorization': localStorage.getItem(\"Authorization\"), \n            })\n          })\n        .then(resp => resp.json())\n        .then(data => {setImgDataList(data)})\n    },[]);\n    // Fetch all tag data\n    useEffect(() => {\n        fetch(\"https://api.xutiancheng.me/v1/tags\",  { \n            method: 'get', \n            headers: new Headers({\n                  'Authorization': localStorage.getItem(\"Authorization\"), \n            })\n          })\n        .then(resp => resp.json())\n        .then(data => \n        {   \n            for (let index = 0; index < data.length; index++) {\n                const element = data[index];\n                let obj={};\n                obj[element.id] = element.name;\n                Object.assign(tagIDTable, obj);\n    \n                let obj2={};\n                obj2[element.name] = element.id;\n                Object.assign(IDTagTable, obj2);\n            }\n            setTagDataList(data);\n        })\n\n\n    },[notifyTagChange]);\n\n    \n    return (\n    <div>\n        <TagTextField NotifyTagUpdate={NotifyTagUpdate}/>\n        <TagButtonList tags={tagDataList} setTag={handleTagClick} NotifyTagUpdate={props.NotifyTagUpdate}/>\n        <ImgCardList tag={tag} imgDataList={imgDataList} tagIDTable={tagIDTable} IDTagTable={IDTagTable} NotifyTagUpdate={NotifyTagUpdate}/>\n        {/* <button onClick={BindTagImg} key=\"12345\" IDTagTable={IDTagTable}>Add Tag</button> */}\n        {/* <ImgCardList tags={tagDataList} tag={tag} imgDataList={imgDataList}/> */}\n    </div>\n    );\n    \n}\n\n//populates the tag buttons into a list\nconst TagButtonList = (props)=>{\n    const TagLists = props.tags.map(data=><TagButton key={data.id} tag={data} setTag={props.setTag} NotifyTagUpdate={props.NotifyTagUpdate}/>);\n    \n    return (<div style={{display:\"flex\",\"flexDirection\": \"row\"}}>{TagLists}</div>)\n}\n\n//gets the new tag name typed by user, after user press 'Enter', pass it to /v1/tags\n//with payload: {\"name\": \"tagname\"}\nconst TagTextField = (props) => {\n    return <input\n    type=\"text\"\n    placeholder=\"create new tag\"\n    onKeyPress={event => {\n                if (event.key === 'Enter') {\n                    var newTag = event.target.value;\n                        // POST request using fetch inside useEffect React hook\n                        const requestOptions = {\n                            method: 'post',\n                            headers: new Headers({\n                                'Content-Type': 'application/json',\n                                'Authorization': localStorage.getItem(\"Authorization\"), \n                              }),\n                            body: JSON.stringify({\"name\": newTag})\n                        };\n\n                        fetch(\"https://api.xutiancheng.me/v1/tags\", requestOptions)\n                        .then(resp => resp.json())\n                        .then(resp =>{\n                            if (resp.status == 201){\n                                setTimeout(() => {\n                                    props.NotifyTagUpdate();\n                                }, 1000)\n                            } else{\n\n                            }\n                            \n                        });\n                        \n\n                }\n              }}\n    />;\n\n};\n\n//individual button showing each tag\nconst TagButton = (props)=>{\n\n    const handleTagClick = (e)=>{\n        props.setTag(props.tag.id)\n    }\n        return <div style={{display:\"flex\",flexWrap:\"wrap\",flexDirection: \"row\", margin:\"15px\"}}>\n            <button onClick={handleTagClick}>{props.tag.name}</button>\n            <BindTagMember tagID = {props.tag.id} NotifyTagUpdate={props.NotifyTagUpdate}/>\n        </div>\n}\n\n//populates the image cards into a list\nconst ImgCardList = (props) => {\n    var photoListItems;\n    if (props.tag === -1) {\n        photoListItems = props.imgDataList.map((data) => {\n\n            return <ImgCard key={data.id} img={data} style={{display:\"flex\",\"flex-wrap\":\"wrap\",\"flexDirection\": \"row\"}}  tagIDTable={props.tagIDTable} IDTagTable={props.IDTagTable} NotifyTagUpdate={props.NotifyTagUpdate}/>\n        });\n    } else {\n\n        photoListItems = props.imgDataList.map((data) => {\n            var tagIds = []\n            data.tags.forEach(e => {\n                tagIds.push(e.id)\n            });\n            if (tagIds.includes(props.tag)){\n                // return <ImgCard key={data.id} img={data} tags={props.tags}/>\n\n                return <ImgCard key={data.id} img={data} style={{display:\"flex\",\"flex-wrap\":\"wrap\",\"flexDirection\": \"row\"}} tagIDTable={props.tagIDTable} IDTagTable={props.IDTagTable} NotifyTagUpdate={props.NotifyTagUpdate}/>\n            }\n        });\n    }\n    \n    return (photoListItems)\n}\n\n//individual image card, still missing function that when clicked,\n//lets user add a tag for this photo\nconst ImgCard = (props) =>{\n    \n    let tagNameList = [];\n    for (let index = 0; index < props.img.tags.length; index++) {\n        let tagIDFromImage = props.img.tags[index].id;\n        let tagID = props.tagIDTable[tagIDFromImage];\n        tagNameList.push(tagID);\n    }\n    let displayResult = tagNameList.map((item, i) => (\n          <p key={i} className=\"font-size-0-8\">\n            {item}\n          </p>)\n    );\n    \n    return(\n    <div>\n        <img src={props.img.url} alt=\"wrong image url\" style={{width:\"150px\",height:\"150px\"}}/>\n        {displayResult}\n        <BindTagImg imgID={props.img.id} IDTagTable={props.IDTagTable} NotifyTagUpdate={props.NotifyTagUpdate}/>\n         {/* <button onClick={BindTagImg} key={props.img.id} IDTagTable={props.IDTagTable}>Add Tag</button> */}\n    </div>\n     );\n    \n}\n\n//bind image to a new tag name input by user and post \n//it to /v1/photos/:photoID/tag/:tagID \nconst BindTagImg = (props)=>{\n    var imageID = props.imgID;\n    return <input\n    type=\"text\"\n    placeholder=\"bind photo with old tag\"\n    onKeyPress={event => {\n                if (event.key === 'Enter') {\n                    var tagName = event.target.value;\n                    var tagID = props.IDTagTable[tagName];\n                    \n                        // POST request using fetch inside useEffect React hook\n                        const requestOptions = {\n                            method: 'post',\n                            headers: new Headers({\n                                'Authorization': localStorage.getItem(\"Authorization\"), \n                              }),\n                        };\n                        fetch(\"https://api.xutiancheng.me/v1/photos/\"+imageID+\"/tag/\"+tagID, requestOptions)\n                        .then(resp => resp.json())\n                        .then(setTimeout(() => {\n                            props.NotifyTagUpdate();\n                        }, 1000));\n                        \n\n                }\n              }}\n    />;\n}\n\n//bind tag to a user id input by user and post \n//it\nconst BindTagMember = (props)=>{\n    var tagID = props.tagID;\n    return <input\n    type=\"text\"\n    placeholder=\"userID\"\n    style={{width:\"50px\"}}\n    onKeyPress={event => {\n                if (event.key === 'Enter') {\n                    var userID = event.target.value;\n                    \n                        // POST request using fetch inside useEffect React hook\n                        const requestOptions = {\n                            method: 'post',\n                            headers: new Headers({\n                                'Content-Type': 'application/json',\n                                'Authorization': localStorage.getItem(\"Authorization\"), \n                              }),\n                            body: JSON.stringify({\"id\": userID})\n                        };\n                        fetch(\"https://api.xutiancheng.me/v1/tags/\"+tagID+\"/members\", requestOptions)\n                        props.NotifyTagUpdate();\n                        alert(\"member added\");\n\n                }\n              }}\n    />;\n}\n\n\nexport default MainPage;"]},"metadata":{},"sourceType":"module"}